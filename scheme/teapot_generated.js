// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Teapot = Teapot || {};

/**
 * @enum {number}
 */
Teapot.Any = {
  NONE: 0,
  Float: 1,
  Int: 2,
  Bool: 3,
  String: 4
};

/**
 * @enum {string}
 */
Teapot.AnyName = {
  0: 'NONE',
  1: 'Float',
  2: 'Int',
  3: 'Bool',
  4: 'String'
};

/**
 * @constructor
 */
Teapot.Float = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.Float}
 */
Teapot.Float.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
Teapot.Float.prototype.value = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} value
 * @returns {flatbuffers.Offset}
 */
Teapot.Float.createFloat = function(builder, value) {
  builder.prep(4, 4);
  builder.writeFloat32(value);
  return builder.offset();
};

/**
 * @constructor
 */
Teapot.Int = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.Int}
 */
Teapot.Int.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
Teapot.Int.prototype.value = function() {
  return this.bb.readInt32(this.bb_pos);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} value
 * @returns {flatbuffers.Offset}
 */
Teapot.Int.createInt = function(builder, value) {
  builder.prep(4, 4);
  builder.writeInt32(value);
  return builder.offset();
};

/**
 * @constructor
 */
Teapot.Bool = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.Bool}
 */
Teapot.Bool.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {boolean}
 */
Teapot.Bool.prototype.value = function() {
  return !!this.bb.readInt8(this.bb_pos);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} value
 * @returns {flatbuffers.Offset}
 */
Teapot.Bool.createBool = function(builder, value) {
  builder.prep(1, 1);
  builder.writeInt8(+value);
  return builder.offset();
};

/**
 * @constructor
 */
Teapot.String = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.String}
 */
Teapot.String.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Teapot.String=} obj
 * @returns {Teapot.String}
 */
Teapot.String.getRootAsString = function(bb, obj) {
  return (obj || new Teapot.String).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Teapot.String.prototype.value = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Teapot.String.startString = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
Teapot.String.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(0, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Teapot.String.endString = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 * @returns {flatbuffers.Offset}
 */
Teapot.String.createString = function(builder, valueOffset) {
  Teapot.String.startString(builder);
  Teapot.String.addValue(builder, valueOffset);
  return Teapot.String.endString(builder);
}

/**
 * @constructor
 */
Teapot.Accessor = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.Accessor}
 */
Teapot.Accessor.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Teapot.Accessor=} obj
 * @returns {Teapot.Accessor}
 */
Teapot.Accessor.getRootAsAccessor = function(bb, obj) {
  return (obj || new Teapot.Accessor).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Teapot.Accessor.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {Teapot.Expression=} obj
 * @returns {Teapot.Expression|null}
 */
Teapot.Accessor.prototype.expression = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new Teapot.Expression).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Teapot.Accessor.startAccessor = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 */
Teapot.Accessor.addType = function(builder, type) {
  builder.addFieldInt32(0, type, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} expressionOffset
 */
Teapot.Accessor.addExpression = function(builder, expressionOffset) {
  builder.addFieldOffset(1, expressionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Teapot.Accessor.endAccessor = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 * @param {flatbuffers.Offset} expressionOffset
 * @returns {flatbuffers.Offset}
 */
Teapot.Accessor.createAccessor = function(builder, type, expressionOffset) {
  Teapot.Accessor.startAccessor(builder);
  Teapot.Accessor.addType(builder, type);
  Teapot.Accessor.addExpression(builder, expressionOffset);
  return Teapot.Accessor.endAccessor(builder);
}

/**
 * @constructor
 */
Teapot.TextPartition = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.TextPartition}
 */
Teapot.TextPartition.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Teapot.TextPartition=} obj
 * @returns {Teapot.TextPartition}
 */
Teapot.TextPartition.getRootAsTextPartition = function(bb, obj) {
  return (obj || new Teapot.TextPartition).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Teapot.TextPartition.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {Teapot.Accessor=} obj
 * @returns {Teapot.Accessor|null}
 */
Teapot.TextPartition.prototype.valueAccessor = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new Teapot.Accessor).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Teapot.TextPartition.prototype.text = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Teapot.TextPartition.startTextPartition = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 */
Teapot.TextPartition.addType = function(builder, type) {
  builder.addFieldInt32(0, type, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueAccessorOffset
 */
Teapot.TextPartition.addValueAccessor = function(builder, valueAccessorOffset) {
  builder.addFieldOffset(1, valueAccessorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} textOffset
 */
Teapot.TextPartition.addText = function(builder, textOffset) {
  builder.addFieldOffset(2, textOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Teapot.TextPartition.endTextPartition = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 * @param {flatbuffers.Offset} valueAccessorOffset
 * @param {flatbuffers.Offset} textOffset
 * @returns {flatbuffers.Offset}
 */
Teapot.TextPartition.createTextPartition = function(builder, type, valueAccessorOffset, textOffset) {
  Teapot.TextPartition.startTextPartition(builder);
  Teapot.TextPartition.addType(builder, type);
  Teapot.TextPartition.addValueAccessor(builder, valueAccessorOffset);
  Teapot.TextPartition.addText(builder, textOffset);
  return Teapot.TextPartition.endTextPartition(builder);
}

/**
 * @constructor
 */
Teapot.Attribute = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.Attribute}
 */
Teapot.Attribute.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Teapot.Attribute=} obj
 * @returns {Teapot.Attribute}
 */
Teapot.Attribute.getRootAsAttribute = function(bb, obj) {
  return (obj || new Teapot.Attribute).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Teapot.Attribute.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Teapot.Attribute.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {Teapot.TextPartition=} obj
 * @returns {Teapot.TextPartition}
 */
Teapot.Attribute.prototype.value = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new Teapot.TextPartition).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Teapot.Attribute.prototype.valueLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Teapot.Attribute.startAttribute = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 */
Teapot.Attribute.addType = function(builder, type) {
  builder.addFieldInt32(0, type, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
Teapot.Attribute.addName = function(builder, nameOffset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
Teapot.Attribute.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(2, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Teapot.Attribute.createValueVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Teapot.Attribute.startValueVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Teapot.Attribute.endAttribute = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} valueOffset
 * @returns {flatbuffers.Offset}
 */
Teapot.Attribute.createAttribute = function(builder, type, nameOffset, valueOffset) {
  Teapot.Attribute.startAttribute(builder);
  Teapot.Attribute.addType(builder, type);
  Teapot.Attribute.addName(builder, nameOffset);
  Teapot.Attribute.addValue(builder, valueOffset);
  return Teapot.Attribute.endAttribute(builder);
}

/**
 * @constructor
 */
Teapot.Renderable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.Renderable}
 */
Teapot.Renderable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Teapot.Renderable=} obj
 * @returns {Teapot.Renderable}
 */
Teapot.Renderable.getRootAsRenderable = function(bb, obj) {
  return (obj || new Teapot.Renderable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Teapot.Renderable.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {Teapot.TextPartition=} obj
 * @returns {Teapot.TextPartition}
 */
Teapot.Renderable.prototype.textPartitions = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new Teapot.TextPartition).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Teapot.Renderable.prototype.textPartitionsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Teapot.Renderable.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {Teapot.Renderable=} obj
 * @returns {Teapot.Renderable}
 */
Teapot.Renderable.prototype.children = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new Teapot.Renderable).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Teapot.Renderable.prototype.childrenLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {Teapot.Attribute=} obj
 * @returns {Teapot.Attribute}
 */
Teapot.Renderable.prototype.attributes = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new Teapot.Attribute).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Teapot.Renderable.prototype.attributesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {Teapot.Renderable=} obj
 * @returns {Teapot.Renderable|null}
 */
Teapot.Renderable.prototype.next = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new Teapot.Renderable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {Teapot.Accessor=} obj
 * @returns {Teapot.Accessor|null}
 */
Teapot.Renderable.prototype.condition = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? (obj || new Teapot.Accessor).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {Teapot.Accessor=} obj
 * @returns {Teapot.Accessor|null}
 */
Teapot.Renderable.prototype.definition = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? (obj || new Teapot.Accessor).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {Teapot.Accessor=} obj
 * @returns {Teapot.Accessor|null}
 */
Teapot.Renderable.prototype.increment = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? (obj || new Teapot.Accessor).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Teapot.Renderable.prototype.definitionVariable = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Teapot.Renderable.prototype.incrementVariable = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {boolean}
 */
Teapot.Renderable.prototype.iterator = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {Teapot.Accessor=} obj
 * @returns {Teapot.Accessor|null}
 */
Teapot.Renderable.prototype.iterable = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? (obj || new Teapot.Accessor).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Teapot.Renderable.prototype.variable = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 30);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {Teapot.Accessor=} obj
 * @returns {Teapot.Accessor|null}
 */
Teapot.Renderable.prototype.accessor = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 32);
  return offset ? (obj || new Teapot.Accessor).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Teapot.Renderable.startRenderable = function(builder) {
  builder.startObject(15);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 */
Teapot.Renderable.addType = function(builder, type) {
  builder.addFieldInt32(0, type, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} textPartitionsOffset
 */
Teapot.Renderable.addTextPartitions = function(builder, textPartitionsOffset) {
  builder.addFieldOffset(1, textPartitionsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Teapot.Renderable.createTextPartitionsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Teapot.Renderable.startTextPartitionsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
Teapot.Renderable.addName = function(builder, nameOffset) {
  builder.addFieldOffset(2, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} childrenOffset
 */
Teapot.Renderable.addChildren = function(builder, childrenOffset) {
  builder.addFieldOffset(3, childrenOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Teapot.Renderable.createChildrenVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Teapot.Renderable.startChildrenVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} attributesOffset
 */
Teapot.Renderable.addAttributes = function(builder, attributesOffset) {
  builder.addFieldOffset(4, attributesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Teapot.Renderable.createAttributesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Teapot.Renderable.startAttributesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nextOffset
 */
Teapot.Renderable.addNext = function(builder, nextOffset) {
  builder.addFieldOffset(5, nextOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} conditionOffset
 */
Teapot.Renderable.addCondition = function(builder, conditionOffset) {
  builder.addFieldOffset(6, conditionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} definitionOffset
 */
Teapot.Renderable.addDefinition = function(builder, definitionOffset) {
  builder.addFieldOffset(7, definitionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} incrementOffset
 */
Teapot.Renderable.addIncrement = function(builder, incrementOffset) {
  builder.addFieldOffset(8, incrementOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} definitionVariableOffset
 */
Teapot.Renderable.addDefinitionVariable = function(builder, definitionVariableOffset) {
  builder.addFieldOffset(9, definitionVariableOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} incrementVariableOffset
 */
Teapot.Renderable.addIncrementVariable = function(builder, incrementVariableOffset) {
  builder.addFieldOffset(10, incrementVariableOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} iterator
 */
Teapot.Renderable.addIterator = function(builder, iterator) {
  builder.addFieldInt8(11, +iterator, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} iterableOffset
 */
Teapot.Renderable.addIterable = function(builder, iterableOffset) {
  builder.addFieldOffset(12, iterableOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} variableOffset
 */
Teapot.Renderable.addVariable = function(builder, variableOffset) {
  builder.addFieldOffset(13, variableOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} accessorOffset
 */
Teapot.Renderable.addAccessor = function(builder, accessorOffset) {
  builder.addFieldOffset(14, accessorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Teapot.Renderable.endRenderable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 * @param {flatbuffers.Offset} textPartitionsOffset
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} childrenOffset
 * @param {flatbuffers.Offset} attributesOffset
 * @param {flatbuffers.Offset} nextOffset
 * @param {flatbuffers.Offset} conditionOffset
 * @param {flatbuffers.Offset} definitionOffset
 * @param {flatbuffers.Offset} incrementOffset
 * @param {flatbuffers.Offset} definitionVariableOffset
 * @param {flatbuffers.Offset} incrementVariableOffset
 * @param {boolean} iterator
 * @param {flatbuffers.Offset} iterableOffset
 * @param {flatbuffers.Offset} variableOffset
 * @param {flatbuffers.Offset} accessorOffset
 * @returns {flatbuffers.Offset}
 */
Teapot.Renderable.createRenderable = function(builder, type, textPartitionsOffset, nameOffset, childrenOffset, attributesOffset, nextOffset, conditionOffset, definitionOffset, incrementOffset, definitionVariableOffset, incrementVariableOffset, iterator, iterableOffset, variableOffset, accessorOffset) {
  Teapot.Renderable.startRenderable(builder);
  Teapot.Renderable.addType(builder, type);
  Teapot.Renderable.addTextPartitions(builder, textPartitionsOffset);
  Teapot.Renderable.addName(builder, nameOffset);
  Teapot.Renderable.addChildren(builder, childrenOffset);
  Teapot.Renderable.addAttributes(builder, attributesOffset);
  Teapot.Renderable.addNext(builder, nextOffset);
  Teapot.Renderable.addCondition(builder, conditionOffset);
  Teapot.Renderable.addDefinition(builder, definitionOffset);
  Teapot.Renderable.addIncrement(builder, incrementOffset);
  Teapot.Renderable.addDefinitionVariable(builder, definitionVariableOffset);
  Teapot.Renderable.addIncrementVariable(builder, incrementVariableOffset);
  Teapot.Renderable.addIterator(builder, iterator);
  Teapot.Renderable.addIterable(builder, iterableOffset);
  Teapot.Renderable.addVariable(builder, variableOffset);
  Teapot.Renderable.addAccessor(builder, accessorOffset);
  return Teapot.Renderable.endRenderable(builder);
}

/**
 * @constructor
 */
Teapot.FieldAccessor = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.FieldAccessor}
 */
Teapot.FieldAccessor.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Teapot.FieldAccessor=} obj
 * @returns {Teapot.FieldAccessor}
 */
Teapot.FieldAccessor.getRootAsFieldAccessor = function(bb, obj) {
  return (obj || new Teapot.FieldAccessor).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Teapot.FieldAccessor.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {Teapot.Expression=} obj
 * @returns {Teapot.Expression|null}
 */
Teapot.FieldAccessor.prototype.innerExpression = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new Teapot.Expression).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {Teapot.Expression=} obj
 * @returns {Teapot.Expression}
 */
Teapot.FieldAccessor.prototype.parameters = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new Teapot.Expression).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Teapot.FieldAccessor.prototype.parametersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Teapot.FieldAccessor.prototype.accessor = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Teapot.FieldAccessor.startFieldAccessor = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 */
Teapot.FieldAccessor.addType = function(builder, type) {
  builder.addFieldInt32(0, type, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} innerExpressionOffset
 */
Teapot.FieldAccessor.addInnerExpression = function(builder, innerExpressionOffset) {
  builder.addFieldOffset(1, innerExpressionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} parametersOffset
 */
Teapot.FieldAccessor.addParameters = function(builder, parametersOffset) {
  builder.addFieldOffset(2, parametersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Teapot.FieldAccessor.createParametersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Teapot.FieldAccessor.startParametersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} accessorOffset
 */
Teapot.FieldAccessor.addAccessor = function(builder, accessorOffset) {
  builder.addFieldOffset(3, accessorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Teapot.FieldAccessor.endFieldAccessor = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 * @param {flatbuffers.Offset} innerExpressionOffset
 * @param {flatbuffers.Offset} parametersOffset
 * @param {flatbuffers.Offset} accessorOffset
 * @returns {flatbuffers.Offset}
 */
Teapot.FieldAccessor.createFieldAccessor = function(builder, type, innerExpressionOffset, parametersOffset, accessorOffset) {
  Teapot.FieldAccessor.startFieldAccessor(builder);
  Teapot.FieldAccessor.addType(builder, type);
  Teapot.FieldAccessor.addInnerExpression(builder, innerExpressionOffset);
  Teapot.FieldAccessor.addParameters(builder, parametersOffset);
  Teapot.FieldAccessor.addAccessor(builder, accessorOffset);
  return Teapot.FieldAccessor.endFieldAccessor(builder);
}

/**
 * @constructor
 */
Teapot.Expression = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.Expression}
 */
Teapot.Expression.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Teapot.Expression=} obj
 * @returns {Teapot.Expression}
 */
Teapot.Expression.getRootAsExpression = function(bb, obj) {
  return (obj || new Teapot.Expression).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Teapot.Expression.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {Teapot.Expression=} obj
 * @returns {Teapot.Expression|null}
 */
Teapot.Expression.prototype.innerExpression = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new Teapot.Expression).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Teapot.Expression.prototype.operator = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {Teapot.Expression=} obj
 * @returns {Teapot.Expression|null}
 */
Teapot.Expression.prototype.left = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new Teapot.Expression).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {Teapot.Expression=} obj
 * @returns {Teapot.Expression|null}
 */
Teapot.Expression.prototype.right = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new Teapot.Expression).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {Teapot.FieldAccessor=} obj
 * @returns {Teapot.FieldAccessor}
 */
Teapot.Expression.prototype.fields = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new Teapot.FieldAccessor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Teapot.Expression.prototype.fieldsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Teapot.Any}
 */
Teapot.Expression.prototype.valueType = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? /** @type {Teapot.Any} */ (this.bb.readUint8(this.bb_pos + offset)) : Teapot.Any.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
Teapot.Expression.prototype.value = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Teapot.Expression.startExpression = function(builder) {
  builder.startObject(8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 */
Teapot.Expression.addType = function(builder, type) {
  builder.addFieldInt32(0, type, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} innerExpressionOffset
 */
Teapot.Expression.addInnerExpression = function(builder, innerExpressionOffset) {
  builder.addFieldOffset(1, innerExpressionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} operatorOffset
 */
Teapot.Expression.addOperator = function(builder, operatorOffset) {
  builder.addFieldOffset(2, operatorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} leftOffset
 */
Teapot.Expression.addLeft = function(builder, leftOffset) {
  builder.addFieldOffset(3, leftOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rightOffset
 */
Teapot.Expression.addRight = function(builder, rightOffset) {
  builder.addFieldOffset(4, rightOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} fieldsOffset
 */
Teapot.Expression.addFields = function(builder, fieldsOffset) {
  builder.addFieldOffset(5, fieldsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Teapot.Expression.createFieldsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Teapot.Expression.startFieldsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Teapot.Any} valueType
 */
Teapot.Expression.addValueType = function(builder, valueType) {
  builder.addFieldInt8(6, valueType, Teapot.Any.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
Teapot.Expression.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(7, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Teapot.Expression.endExpression = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 * @param {flatbuffers.Offset} innerExpressionOffset
 * @param {flatbuffers.Offset} operatorOffset
 * @param {flatbuffers.Offset} leftOffset
 * @param {flatbuffers.Offset} rightOffset
 * @param {flatbuffers.Offset} fieldsOffset
 * @param {Teapot.Any} valueType
 * @param {flatbuffers.Offset} valueOffset
 * @returns {flatbuffers.Offset}
 */
Teapot.Expression.createExpression = function(builder, type, innerExpressionOffset, operatorOffset, leftOffset, rightOffset, fieldsOffset, valueType, valueOffset) {
  Teapot.Expression.startExpression(builder);
  Teapot.Expression.addType(builder, type);
  Teapot.Expression.addInnerExpression(builder, innerExpressionOffset);
  Teapot.Expression.addOperator(builder, operatorOffset);
  Teapot.Expression.addLeft(builder, leftOffset);
  Teapot.Expression.addRight(builder, rightOffset);
  Teapot.Expression.addFields(builder, fieldsOffset);
  Teapot.Expression.addValueType(builder, valueType);
  Teapot.Expression.addValue(builder, valueOffset);
  return Teapot.Expression.endExpression(builder);
}

/**
 * @constructor
 */
Teapot.TeapotTemplate = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Teapot.TeapotTemplate}
 */
Teapot.TeapotTemplate.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Teapot.TeapotTemplate=} obj
 * @returns {Teapot.TeapotTemplate}
 */
Teapot.TeapotTemplate.getRootAsTeapotTemplate = function(bb, obj) {
  return (obj || new Teapot.TeapotTemplate).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Teapot.TeapotTemplate.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {Teapot.Renderable=} obj
 * @returns {Teapot.Renderable|null}
 */
Teapot.TeapotTemplate.prototype.root = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new Teapot.Renderable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Teapot.TeapotTemplate.startTeapotTemplate = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 */
Teapot.TeapotTemplate.addType = function(builder, type) {
  builder.addFieldInt32(0, type, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rootOffset
 */
Teapot.TeapotTemplate.addRoot = function(builder, rootOffset) {
  builder.addFieldOffset(1, rootOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Teapot.TeapotTemplate.endTeapotTemplate = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Teapot.TeapotTemplate.finishTeapotTemplateBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} type
 * @param {flatbuffers.Offset} rootOffset
 * @returns {flatbuffers.Offset}
 */
Teapot.TeapotTemplate.createTeapotTemplate = function(builder, type, rootOffset) {
  Teapot.TeapotTemplate.startTeapotTemplate(builder);
  Teapot.TeapotTemplate.addType(builder, type);
  Teapot.TeapotTemplate.addRoot(builder, rootOffset);
  return Teapot.TeapotTemplate.endTeapotTemplate(builder);
}

// Exports for Node.js and RequireJS
this.Teapot = Teapot;
